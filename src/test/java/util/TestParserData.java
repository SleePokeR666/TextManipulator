package util;

public interface TestParserData {

		String positiveText = "На нижнем уровне операции с данными в Java осуществляются посредством операторов. Язык Java создавался на основе C++, поэтому большинство этих операторов и конструкций знакомы программистам на C и C++. Также в Java были добавлены некоторые улучшения и упрощения. Если вы .знакомы с синтаксисом C или C++, бегло просмотрите эту и следующую главу, останавливаясь на тех местах, в которых Java отличается от этих языков. Если чтение дается вам с трудом, попробуйте обратиться к мультимедийному семинару Thinking in С, свободно загружаемому с сайта www.MindView.net. Он содержит аудиолекции, слайды, упражнения и решения, специально разработанные для быстрого ознакомления с синтаксисом C, необходимым для успешного овладения языком Java.\n" +
				"\n" +
				"Простые команды печати\n" +
				"В предыдущей главе была представлена команда печати Java\n" +
				"\n" +
				" System.out.println(\"Какая длинная команда...\");\n" +
				"Вероятно, вы заметили, что команда не только получается слишком длинной, но и плохо читается. Во многих языках до и после Java используется более простой подход к выполнению столь распространенной операции. В главе 6 представлена концепция статического импорта, появившаяся в Java SE 5, а также крошечная библиотека, упрощающая написание команд печати. Тем не менее для использования библиотеки не обязательно знать все подробности. Программу из предыдущей главы можно переписать в следующем виде:\n" +
				"\n" +
				"//: operators/HelloDate.java\n" +
				"import java.util.*;\n" +
				"import static net.mindview.util.Print.*;\n" +
				" \n" +
				"public class HelloDate {\n" +
				"  public static void main(String[] args) {\n" +
				"    print(\"Привет, сегодня: \");\n" +
				"    print(new Date());\n" +
				"  }\n" +
				"}\n" +
				"<spoiler text=\"Output:\">\n" +
				"\n" +
				"Привет, сегодня\n" +
				"Wed Oct 05 14-39 36 MDT 2005\n" +
				"</spoiler> Результат смотрится гораздо приятнее. Обратите внимание на ключевое слово static во второй команде import.\n" +
				"\n" +
				"Чтобы использовать эту библиотеку, необходимо загрузить архив с примерами кода. Распакуйте его и включите корневой каталог дерева в переменную окружения CLASSPATH вашего компьютера. Хотя использование net.mindview.util.Print упрощает программный код, оно оправданно не везде. Если программа содержит небольшое количество команд печати, я отказываюсь от import и записываю полный вызов System.out.println().\n" +
				"\n" +
				"\n" +
				"Операторы Java\n" +
				"Оператор получает один или несколько аргументов и создает на их основе новое значение. Форма передачи аргументов несколько иная, чем при вызове метода, но эффект тот же самый. Сложение (+), вычитание и унарный минус (-), умножение (*), деление (/) и присвоение (=) работают одинаково фактически во всех языках программирования.\n" +
				"\n" +
				"Все операторы работают с операндами и выдают какой-то результат. Вдобавок некоторые операторы могут изменить значение операнда. Это называется побочным эффектом. Как правило, операторы, изменяющие значение своих операндов, используются именно ради побочного эффекта, но вы должны помнить, что полученное значение может быть использовано в программе и обычным образом, независимо от побочных эффектов.\n" +
				"\n" +
				"Почти все операторы работают только с примитивами. Исключениями являются =, ==, !=, которые могут быть применены к объектам (и создают немало затруднений). Кроме того, класс String поддерживает операции + и +=.\n" +
				"\n" +
				"\n" +
				"Приоритет\n" +
				"Приоритет операций определяет порядок вычисления выражений с несколькими операторами. В Java существуют конкретные правила для определения очередности вычислений. Легче всего запомнить, что деление и умножение выполняются раньше сложения и вычитания. Программисты часто забывают правила предшествования, поэтому для явного задания порядка вычислений следует использовать круглые скобки. Например, взгляните на команды (1) и (2):\n" +
				"\n" +
				"//: operators/Precedence.java\n" +
				"public class Precedence {\n" +
				"  public static void main(String[] args) {\n" +
				"    int x = 1, y = 2, z = 3;\n" +
				"    int a = x + y - 2/2 + z;           // (1)\n" +
				"    int b = x + (y - 2)/(2 + z);       // (2)\n" +
				"    System.out.println(\"a = \" + a + \" b = \" + b);\n" +
				"  }\n" +
				"}\n" +
				"<spoiler text=\"Output:\">\n" +
				"\n" +
				"a = 5 b = 1\n" +
				"</spoiler> Команды похожи друг на друга, но из результатов хорошо видно, что они имеют разный смысл в зависимости от присутствия круглых скобок. Обратите внимание на оператор + в команде System.out.println. В данном контексте + означает конкатенацию строк, а не суммирование. Когда компилятор встречает объект String, за которым следует + и объект, отличный от String, он пытается преобразовать последний объект в String. Как видно из выходных данных, для а и b тип int был успешно преобразован в String.\n" +
				"\n" +
				"Присвоение\n" +
				"Присвоение выполняется оператором =\n" +
				"\n" +
				"Трактуется он так: «взять значение из правой части выражения (часто называемое просто значением) и скопировать его в левую часть (часто называемую именующим выражением)». Значением может быть любая константа, переменная или выражение, но в качестве именующего выражения обязательно должна использоваться именованная переменная (то есть для хранения значения должна выделяться физическая память). Например, вы можете присвоить постоянное значение переменной:\n" +
				"\n" +
				" а = 4;\n" +
				"но нельзя присвоить что-либо константе — она не может использоваться в качестве именующего выражения (например, запись 4 = а недопустима).\n" +
				"\n" +
				"Для примитивов присвоение выполняется тривиально. Так как примитивный тип хранит данные, а не ссылку на объект, то присвоение сводится к простому копированию данных из одного места в другое. Например, если команда а = b выполняется для примитивных типов, то содержимое b просто копируется в а. Естественно, последующие изменения а никак не отражаются на b. Для программиста именно такое поведение выглядит наиболее логично.\n" +
				"\n" +
				"При присвоении объектов все меняется. При выполнении операций с объектом вы в действительности работаете со ссылкой, поэтому присвоение «одного объекта другому» на самом деле означает копирование ссылки из одного места в другое. Это значит, что при выполнении команды c = d для объектов в конечном итоге с и d указывают на один объект, которому изначально соответствовала только ссылка d. Сказанное демонстрирует следующий пример:";
}
